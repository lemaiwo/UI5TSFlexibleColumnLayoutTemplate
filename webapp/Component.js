sap.ui.define(["sap/ui/core/UIComponent", "./model/models", "sap/ui/Device", "sap/f/FlexibleColumnLayoutSemanticHelper", "sap/f/library", "sap/ui/model/json/JSONModel", "./controller/ErrorHandler"], function (UIComponent, __models, sap_ui_Device, FlexibleColumnLayoutSemanticHelper, sap_f_library, JSONModel, __ErrorHandler) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule && typeof obj.default !== "undefined" ? obj.default : obj;
  }

  const models = _interopRequireDefault(__models);

  const support = sap_ui_Device["support"];
  const LayoutType = sap_f_library["LayoutType"];

  const ErrorHandler = _interopRequireDefault(__ErrorHandler); // import device from "sap/ui/Device";


  /**
   * @namespace com.template
   */
  const Component = UIComponent.extend("com.template.Component", {
    metadata: {
      manifest: "json"
    },
    init: function _init() {
      this.errorHandler = new ErrorHandler(this);
      UIComponent.prototype.init.call(this); // set the device model

      this.setModel(models.createDeviceModel(), "device");
      this.setModel(new JSONModel(), "appView");
      this.getRouter().attachBeforeRouteMatched(event => this.onBeforeRouteMatched(event), this);
      this.getRouter().initialize();
    },
    destroy: function _destroy() {
      UIComponent.prototype.destroy.call(this);
    },
    getContentDensityClass: function _getContentDensityClass() {
      if (this._sContentDensityClass === undefined) {
        // check whether FLP has already set the content density class; do nothing in this case
        // eslint-disable-next-line
        if (document.body.classList.contains("sapUiSizeCozy") || document.body.classList.contains("sapUiSizeCompact")) {
          this._sContentDensityClass = "";
        } else if (!support.touch) {
          // apply "compact" mode if touch is not supported
          this._sContentDensityClass = "sapUiSizeCompact";
        } else {
          // "cozy" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table
          this._sContentDensityClass = "sapUiSizeCozy";
        }
      }

      return this._sContentDensityClass;
    },
    onBeforeRouteMatched: async function _onBeforeRouteMatched(oEvent) {
      const oModel = this.getModel("appView"),
            sLayout = oEvent.getParameters().arguments.layout; // If there is no layout parameter, query for the default level 0 layout (normally OneColumn)

      if (!sLayout) {
        const helper = await this.getHelper();
        const oNextUIState = helper.getNextUIState(0);
        oModel.setProperty("/layout", oNextUIState.layout);
        return;
      }

      oModel.setProperty("/layout", sLayout);
    },
    getHelper: async function _getHelper() {
      const fcl = await this.getFcl(),
            oSettings = {
        defaultTwoColumnLayoutType: LayoutType.TwoColumnsMidExpanded,
        defaultThreeColumnLayoutType: LayoutType.ThreeColumnsMidExpanded
      };
      return FlexibleColumnLayoutSemanticHelper.getInstanceFor(fcl, oSettings);
    },
    getFcl: function _getFcl() {
      return new Promise((resolve, reject) => {
        const oFCL = this.getRootControl().byId('fcl');

        if (!oFCL) {
          this.getRootControl().attachAfterInit(oEvent => {
            resolve(oEvent.getSource().byId('fcl'));
          });
          return;
        }

        resolve(oFCL);
      });
    },
    onExit: function _onExit() {
      this.getRouter().detachBeforeRouteMatched(event => this.onBeforeRouteMatched(event), this);
    }
  });
  return Component;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,