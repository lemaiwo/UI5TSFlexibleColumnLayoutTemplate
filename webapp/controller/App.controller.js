sap.ui.define(["./BaseController"], function (__BaseController) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule && typeof obj.default !== "undefined" ? obj.default : obj;
  }

  const BaseController = _interopRequireDefault(__BaseController);

  /**
   * @namespace com.template.controller
   */
  const App = BaseController.extend("com.template.controller.App", {
    onInit: function _onInit() {
      // apply content density mode to root view
      this.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());
      this.getOwnerComponent().getRouter().attachRouteMatched(event => this.onRouteMatched(event), this);
    },
    onStateChanged: function _onStateChanged(oEvent) {
      const bIsNavigationArrow = oEvent.getParameter("isNavigationArrow"),
            sLayout = oEvent.getParameter("layout");
      void this.updateUIElements(); // Replace the URL with the new layout if a navigation arrow was used

      if (bIsNavigationArrow) {
        this.getOwnerComponent().getRouter().navTo(this.currentRouteName, {
          layout: sLayout,
          id: this.currentId
        }, {}, true);
      }
    },
    onRouteMatched: function _onRouteMatched(oEvent) {
      const sRouteName = oEvent.getParameter("name"),
            oArguments = oEvent.getParameter("arguments");
      void this.updateUIElements(); // Save the current route name

      this.currentRouteName = sRouteName;
      this.currentId = oArguments.id;
    },
    updateUIElements: async function _updateUIElements() {
      const oModel = this.getOwnerComponent().getModel("appView"),
            helper = await this.getOwnerComponent().getHelper(),
            oUIState = helper.getCurrentUIState();
      oModel.setData(oUIState);
    },
    onExit: function _onExit() {
      this.getRouter() && this.getRouter().detachRouteMatched(event => this.onRouteMatched(event), this);
    }
  });
  return App;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cm9sbGVyL0FwcC5jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbIkJhc2VDb250cm9sbGVyIiwiQXBwIiwib25Jbml0IiwiZ2V0VmlldyIsImFkZFN0eWxlQ2xhc3MiLCJnZXRPd25lckNvbXBvbmVudCIsImdldENvbnRlbnREZW5zaXR5Q2xhc3MiLCJnZXRSb3V0ZXIiLCJhdHRhY2hSb3V0ZU1hdGNoZWQiLCJldmVudCIsIm9uUm91dGVNYXRjaGVkIiwib25TdGF0ZUNoYW5nZWQiLCJvRXZlbnQiLCJiSXNOYXZpZ2F0aW9uQXJyb3ciLCJnZXRQYXJhbWV0ZXIiLCJzTGF5b3V0IiwidXBkYXRlVUlFbGVtZW50cyIsIm5hdlRvIiwiY3VycmVudFJvdXRlTmFtZSIsImxheW91dCIsImlkIiwiY3VycmVudElkIiwic1JvdXRlTmFtZSIsIm9Bcmd1bWVudHMiLCJvTW9kZWwiLCJnZXRNb2RlbCIsImhlbHBlciIsImdldEhlbHBlciIsIm9VSVN0YXRlIiwiZ2V0Q3VycmVudFVJU3RhdGUiLCJzZXREYXRhIiwib25FeGl0IiwiZGV0YWNoUm91dGVNYXRjaGVkIl0sIm1hcHBpbmdzIjoiOzs7OztRQUVPQSxjOztBQU1QO0FBQ0E7QUFDQTtRQUNxQkMsRyxHQUFZRCxjO0FBR3pCRSxJQUFBQSxNLHFCQUFlO0FBQ3JCO0FBQ0EsV0FBS0MsT0FBTCxHQUFlQyxhQUFmLENBQThCLEtBQUtDLGlCQUFMLEVBQUQsQ0FBMkNDLHNCQUEzQyxFQUE3QjtBQUNDLFdBQUtELGlCQUFMLEVBQUQsQ0FBMkNFLFNBQTNDLEdBQXVEQyxrQkFBdkQsQ0FBMkVDLEtBQUQsSUFBbUIsS0FBS0MsY0FBTCxDQUFvQkQsS0FBcEIsQ0FBN0YsRUFBeUgsSUFBekg7QUFDQSxLO0FBQ01FLElBQUFBLGMsMkJBQWVDLE0sRUFBc0I7QUFDM0MsWUFBTUMsa0JBQWtCLEdBQUdELE1BQU0sQ0FBQ0UsWUFBUCxDQUFvQixtQkFBcEIsQ0FBM0I7QUFBQSxZQUNDQyxPQUFPLEdBQUlILE1BQU0sQ0FBQ0UsWUFBUCxDQUFvQixRQUFwQixDQURaO0FBR0EsV0FBSyxLQUFLRSxnQkFBTCxFQUFMLENBSjJDLENBTTNDOztBQUNBLFVBQUlILGtCQUFKLEVBQXdCO0FBQ3RCLGFBQUtSLGlCQUFMLEVBQUQsQ0FBMkNFLFNBQTNDLEdBQXVEVSxLQUF2RCxDQUE2RCxLQUFLQyxnQkFBbEUsRUFBb0Y7QUFBQ0MsVUFBQUEsTUFBTSxFQUFFSixPQUFUO0FBQWtCSyxVQUFBQSxFQUFFLEVBQUUsS0FBS0M7QUFBM0IsU0FBcEYsRUFBMEgsRUFBMUgsRUFBOEgsSUFBOUg7QUFDQTtBQUNELEs7QUFDTVgsSUFBQUEsYywyQkFBZUUsTSxFQUFzQjtBQUMzQyxZQUFNVSxVQUFVLEdBQUlWLE1BQU0sQ0FBQ0UsWUFBUCxDQUFvQixNQUFwQixDQUFwQjtBQUFBLFlBQ0NTLFVBQVUsR0FBSVgsTUFBTSxDQUFDRSxZQUFQLENBQW9CLFdBQXBCLENBRGY7QUFHQSxXQUFLLEtBQUtFLGdCQUFMLEVBQUwsQ0FKMkMsQ0FNM0M7O0FBQ0EsV0FBS0UsZ0JBQUwsR0FBd0JJLFVBQXhCO0FBQ0EsV0FBS0QsU0FBTCxHQUFpQkUsVUFBVSxDQUFDSCxFQUE1QjtBQUNBLEs7QUFDYUosSUFBQUEsZ0IscUNBQW1CO0FBQ2hDLFlBQU1RLE1BQU0sR0FBSyxLQUFLbkIsaUJBQUwsRUFBRCxDQUEyQ29CLFFBQTNDLENBQW9ELFNBQXBELENBQWhCO0FBQUEsWUFDQ0MsTUFBTSxHQUFHLE1BQU8sS0FBS3JCLGlCQUFMLEVBQUQsQ0FBMkNzQixTQUEzQyxFQURoQjtBQUFBLFlBRUNDLFFBQVEsR0FBSUYsTUFBTSxDQUFDRyxpQkFBUCxFQUZiO0FBR0FMLE1BQUFBLE1BQU0sQ0FBQ00sT0FBUCxDQUFlRixRQUFmO0FBQ0EsSztBQUVNRyxJQUFBQSxNLHFCQUFhO0FBQ25CLFdBQUt4QixTQUFMLE1BQW9CLEtBQUtBLFNBQUwsR0FBaUJ5QixrQkFBakIsQ0FBcUN2QixLQUFELElBQW1CLEtBQUtDLGNBQUwsQ0FBb0JELEtBQXBCLENBQXZELEVBQW1GLElBQW5GLENBQXBCO0FBQ0E7O1NBdENtQlIsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcHBDb21wb25lbnQsIHsgVUlTdGF0ZSB9IGZyb20gXCIuLi9Db21wb25lbnRcIjtcclxuaW1wb3J0IEpTT05Nb2RlbCBmcm9tIFwic2FwL3VpL21vZGVsL2pzb24vSlNPTk1vZGVsXCI7XHJcbmltcG9ydCBCYXNlQ29udHJvbGxlciBmcm9tIFwiLi9CYXNlQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgVUk1RXZlbnQgZnJvbSBcInNhcC91aS9iYXNlL0V2ZW50XCI7XHJcblxyXG5leHBvcnQgdHlwZSBpbnB1dFBhcmFtZXRlcnMgPSB7XHJcblx0aWQ6IHN0cmluZztcclxufTtcclxuLyoqXHJcbiAqIEBuYW1lc3BhY2UgY29tLnRlbXBsYXRlLmNvbnRyb2xsZXJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIEJhc2VDb250cm9sbGVyIHtcclxuXHRwcml2YXRlIGN1cnJlbnRSb3V0ZU5hbWU6IHN0cmluZztcclxuXHRwcml2YXRlIGN1cnJlbnRJZDogc3RyaW5nO1xyXG5cdHB1YmxpYyBvbkluaXQoKTogdm9pZCB7XHJcblx0XHQvLyBhcHBseSBjb250ZW50IGRlbnNpdHkgbW9kZSB0byByb290IHZpZXdcclxuXHRcdHRoaXMuZ2V0VmlldygpLmFkZFN0eWxlQ2xhc3MoKHRoaXMuZ2V0T3duZXJDb21wb25lbnQoKSBhcyBBcHBDb21wb25lbnQpLmdldENvbnRlbnREZW5zaXR5Q2xhc3MoKSk7XHJcblx0XHQodGhpcy5nZXRPd25lckNvbXBvbmVudCgpIGFzIEFwcENvbXBvbmVudCkuZ2V0Um91dGVyKCkuYXR0YWNoUm91dGVNYXRjaGVkKChldmVudDogVUk1RXZlbnQpPT50aGlzLm9uUm91dGVNYXRjaGVkKGV2ZW50KSwgdGhpcyk7XHJcblx0fVxyXG5cdHB1YmxpYyBvblN0YXRlQ2hhbmdlZChvRXZlbnQ6IFVJNUV2ZW50KTp2b2lke1xyXG5cdFx0Y29uc3QgYklzTmF2aWdhdGlvbkFycm93ID0ob0V2ZW50LmdldFBhcmFtZXRlcihcImlzTmF2aWdhdGlvbkFycm93XCIpIGFzIHN0cmluZyksXHJcblx0XHRcdHNMYXlvdXQgPSAob0V2ZW50LmdldFBhcmFtZXRlcihcImxheW91dFwiKSBhcyBzdHJpbmcpO1xyXG5cclxuXHRcdHZvaWQgdGhpcy51cGRhdGVVSUVsZW1lbnRzKCk7XHJcblxyXG5cdFx0Ly8gUmVwbGFjZSB0aGUgVVJMIHdpdGggdGhlIG5ldyBsYXlvdXQgaWYgYSBuYXZpZ2F0aW9uIGFycm93IHdhcyB1c2VkXHJcblx0XHRpZiAoYklzTmF2aWdhdGlvbkFycm93KSB7XHJcblx0XHRcdCh0aGlzLmdldE93bmVyQ29tcG9uZW50KCkgYXMgQXBwQ29tcG9uZW50KS5nZXRSb3V0ZXIoKS5uYXZUbyh0aGlzLmN1cnJlbnRSb3V0ZU5hbWUsIHtsYXlvdXQ6IHNMYXlvdXQsIGlkOiB0aGlzLmN1cnJlbnRJZH0se30sIHRydWUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRwdWJsaWMgb25Sb3V0ZU1hdGNoZWQob0V2ZW50OiBVSTVFdmVudCk6dm9pZHtcclxuXHRcdGNvbnN0IHNSb3V0ZU5hbWUgPSAob0V2ZW50LmdldFBhcmFtZXRlcihcIm5hbWVcIikgYXMgc3RyaW5nKSxcclxuXHRcdFx0b0FyZ3VtZW50cyA9IChvRXZlbnQuZ2V0UGFyYW1ldGVyKFwiYXJndW1lbnRzXCIpIGFzIGlucHV0UGFyYW1ldGVycyk7XHJcblxyXG5cdFx0dm9pZCB0aGlzLnVwZGF0ZVVJRWxlbWVudHMoKTtcclxuXHJcblx0XHQvLyBTYXZlIHRoZSBjdXJyZW50IHJvdXRlIG5hbWVcclxuXHRcdHRoaXMuY3VycmVudFJvdXRlTmFtZSA9IHNSb3V0ZU5hbWU7XHJcblx0XHR0aGlzLmN1cnJlbnRJZCA9IG9Bcmd1bWVudHMuaWQ7XHJcblx0fVxyXG5cdHByaXZhdGUgYXN5bmMgdXBkYXRlVUlFbGVtZW50cygpIHtcclxuXHRcdGNvbnN0IG9Nb2RlbCA9ICgodGhpcy5nZXRPd25lckNvbXBvbmVudCgpIGFzIEFwcENvbXBvbmVudCkuZ2V0TW9kZWwoXCJhcHBWaWV3XCIpIGFzIEpTT05Nb2RlbCksXHJcblx0XHRcdGhlbHBlciA9IGF3YWl0ICh0aGlzLmdldE93bmVyQ29tcG9uZW50KCkgYXMgQXBwQ29tcG9uZW50KS5nZXRIZWxwZXIoKSxcclxuXHRcdFx0b1VJU3RhdGUgPSAoaGVscGVyLmdldEN1cnJlbnRVSVN0YXRlKCkgYXMgVUlTdGF0ZSk7XHJcblx0XHRvTW9kZWwuc2V0RGF0YShvVUlTdGF0ZSk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgb25FeGl0KCk6dm9pZHtcclxuXHRcdHRoaXMuZ2V0Um91dGVyKCkgJiYgdGhpcy5nZXRSb3V0ZXIoKS5kZXRhY2hSb3V0ZU1hdGNoZWQoKGV2ZW50OiBVSTVFdmVudCk9PnRoaXMub25Sb3V0ZU1hdGNoZWQoZXZlbnQpLCB0aGlzKTtcclxuXHR9XHJcbn0iXX0=