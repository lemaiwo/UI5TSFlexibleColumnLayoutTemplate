sap.ui.define(["sap/ui/base/Object", "sap/m/MessageBox"], function (UI5Object, MessageBox) {
  /**
   * @namespace com.template.controller
   */
  const ErrorHandler = UI5Object.extend("com.template.controller.ErrorHandler", {
    constructor: function _constructor(component) {
      UI5Object.prototype.constructor.call(this);
      this.resourceBundle = component.getModel("i18n").getResourceBundle();
      this.component = component;
      this.model = component.getModel();
      this.messageOpen = false;
      this.errorText = this.resourceBundle.getText("errorText");
      this.model.attachMetadataFailed(event => {
        const responseText = event.getParameter("response");
        this.showServiceError(responseText);
      });
      this.model.attachRequestFailed(event => {
        const response = event.getParameter("response"); // An entity that was not found in the service is also throwing a 404 error in oData.
        // We already cover this case with a notFound target so we skip it here.
        // A request that cannot be sent to the server is a technical error that we have to handle though

        if (response.statusCode !== "404" || response.statusCode == "404" && response.responseText.indexOf("Cannot POST") === 0) {
          this.showServiceError(response);
        }
      });
    },
    showServiceError: function _showServiceError(sDetails) {
      if (this.messageOpen) {
        return;
      }

      this.messageOpen = true;
      let responseText;

      if (sDetails.responseText) {
        try {
          responseText = JSON.parse(sDetails.responseText);
        } catch (ex) {
          responseText = sDetails.responseText;
        }
      }

      MessageBox.error(this.errorText, {
        id: "serviceErrorMessageBox",
        details: responseText,
        styleClass: this.component.getContentDensityClass(),
        // actions : [Action.CLOSE],
        onClose: () => {
          this.messageOpen = false;
        }
      });
    }
  });
  return ErrorHandler;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cm9sbGVyL0Vycm9ySGFuZGxlci50cyJdLCJuYW1lcyI6WyJFcnJvckhhbmRsZXIiLCJVSTVPYmplY3QiLCJjb25zdHJ1Y3RvciIsImNvbXBvbmVudCIsInJlc291cmNlQnVuZGxlIiwiZ2V0TW9kZWwiLCJnZXRSZXNvdXJjZUJ1bmRsZSIsIm1vZGVsIiwibWVzc2FnZU9wZW4iLCJlcnJvclRleHQiLCJnZXRUZXh0IiwiYXR0YWNoTWV0YWRhdGFGYWlsZWQiLCJldmVudCIsInJlc3BvbnNlVGV4dCIsImdldFBhcmFtZXRlciIsInNob3dTZXJ2aWNlRXJyb3IiLCJhdHRhY2hSZXF1ZXN0RmFpbGVkIiwicmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwiaW5kZXhPZiIsInNEZXRhaWxzIiwiSlNPTiIsInBhcnNlIiwiZXgiLCJNZXNzYWdlQm94IiwiZXJyb3IiLCJpZCIsImRldGFpbHMiLCJzdHlsZUNsYXNzIiwiZ2V0Q29udGVudERlbnNpdHlDbGFzcyIsIm9uQ2xvc2UiXSwibWFwcGluZ3MiOiI7QUE0QkE7QUFDQTtBQUNBO1FBQ3FCQSxZLEdBQXFCQyxTO0FBTXpDQyxJQUFBQSxXLHdCQUFZQyxTLEVBQXdCO0FBQ25DO0FBRUEsV0FBS0MsY0FBTCxHQUF3QkQsU0FBUyxDQUFDRSxRQUFWLENBQW1CLE1BQW5CLENBQUQsQ0FBOENDLGlCQUE5QyxFQUF2QjtBQUNBLFdBQUtILFNBQUwsR0FBa0JBLFNBQWxCO0FBQ0EsV0FBS0ksS0FBTCxHQUFjSixTQUFTLENBQUNFLFFBQVYsRUFBZDtBQUNBLFdBQUtHLFdBQUwsR0FBbUIsS0FBbkI7QUFDQSxXQUFLQyxTQUFMLEdBQWlCLEtBQUtMLGNBQUwsQ0FBb0JNLE9BQXBCLENBQTRCLFdBQTVCLENBQWpCO0FBRUEsV0FBS0gsS0FBTCxDQUFXSSxvQkFBWCxDQUFpQ0MsS0FBRCxJQUFxQjtBQUNwRCxjQUFNQyxZQUFZLEdBQUlELEtBQUssQ0FBQ0UsWUFBTixDQUFtQixVQUFuQixDQUF0QjtBQUNBLGFBQUtDLGdCQUFMLENBQXNCRixZQUF0QjtBQUNBLE9BSEQ7QUFJQSxXQUFLTixLQUFMLENBQVdTLG1CQUFYLENBQWdDSixLQUFELElBQXFCO0FBQ25ELGNBQU1LLFFBQVEsR0FBSUwsS0FBSyxDQUFDRSxZQUFOLENBQW1CLFVBQW5CLENBQWxCLENBRG1ELENBRW5EO0FBQ0E7QUFDQTs7QUFDQSxZQUFJRyxRQUFRLENBQUNDLFVBQVQsS0FBd0IsS0FBeEIsSUFBa0NELFFBQVEsQ0FBQ0MsVUFBVCxJQUF1QixLQUF2QixJQUFnQ0QsUUFBUSxDQUFDSixZQUFULENBQXNCTSxPQUF0QixDQUE4QixhQUE5QixNQUFpRCxDQUF2SCxFQUEySDtBQUMxSCxlQUFLSixnQkFBTCxDQUFzQkUsUUFBdEI7QUFDQTtBQUNELE9BUkQ7QUFTQSxLO0FBT09GLElBQUFBLGdCLDZCQUFpQkssUSxFQUF1QjtBQUMvQyxVQUFJLEtBQUtaLFdBQVQsRUFBc0I7QUFDckI7QUFDQTs7QUFDRCxXQUFLQSxXQUFMLEdBQW1CLElBQW5CO0FBQ0EsVUFBSUssWUFBSjs7QUFFQSxVQUFHTyxRQUFRLENBQUNQLFlBQVosRUFBeUI7QUFDeEIsWUFBRztBQUNGQSxVQUFBQSxZQUFZLEdBQUlRLElBQUksQ0FBQ0MsS0FBTCxDQUFXRixRQUFRLENBQUNQLFlBQXBCLENBQWhCO0FBQ0EsU0FGRCxDQUVDLE9BQU1VLEVBQU4sRUFBUztBQUNUVixVQUFBQSxZQUFZLEdBQUdPLFFBQVEsQ0FBQ1AsWUFBeEI7QUFDQTtBQUNEOztBQUNEVyxNQUFBQSxVQUFVLENBQUNDLEtBQVgsQ0FDQyxLQUFLaEIsU0FETixFQUVDO0FBQ0NpQixRQUFBQSxFQUFFLEVBQUUsd0JBREw7QUFFQ0MsUUFBQUEsT0FBTyxFQUFHZCxZQUZYO0FBR0NlLFFBQUFBLFVBQVUsRUFBRSxLQUFLekIsU0FBTCxDQUFlMEIsc0JBQWYsRUFIYjtBQUlDO0FBQ0FDLFFBQUFBLE9BQU8sRUFBRSxNQUFNO0FBQ2QsZUFBS3RCLFdBQUwsR0FBbUIsS0FBbkI7QUFDQTtBQVBGLE9BRkQ7QUFZQTs7U0E3RG1CUixZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFVJNU9iamVjdCBmcm9tIFwic2FwL3VpL2Jhc2UvT2JqZWN0XCI7XHJcbmltcG9ydCBNZXNzYWdlQm94IGZyb20gXCJzYXAvbS9NZXNzYWdlQm94XCI7XHJcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gXCJzYXAvbS9NZXNzYWdlQm94XCI7XHJcblxyXG5pbXBvcnQgUmVzb3VyY2VCdW5kbGUgZnJvbSBcInNhcC9iYXNlL2kxOG4vUmVzb3VyY2VCdW5kbGVcIjtcclxuaW1wb3J0IFVJQ29tcG9uZW50IGZyb20gXCJzYXAvdWkvY29yZS9VSUNvbXBvbmVudFwiO1xyXG5pbXBvcnQgQXBwQ29tcG9uZW50IGZyb20gXCIuLi9Db21wb25lbnRcIjtcclxuaW1wb3J0IFJlc291cmNlTW9kZWwgZnJvbSBcInNhcC91aS9tb2RlbC9yZXNvdXJjZS9SZXNvdXJjZU1vZGVsXCI7XHJcbmltcG9ydCBVSTVFdmVudCBmcm9tIFwic2FwL3VpL2Jhc2UvRXZlbnRcIjtcclxuaW1wb3J0IE9EYXRhTW9kZWwgZnJvbSBcInNhcC91aS9tb2RlbC9vZGF0YS92Mi9PRGF0YU1vZGVsXCI7XHJcbnR5cGUgdWk1UmVzcG9uc2UgPSB7XHJcblx0LyoqXHJcblx0ICogQSB0ZXh0IHRoYXQgZGVzY3JpYmVzIHRoZSBmYWlsdXJlLlxyXG5cdCAqL1xyXG5cdG1lc3NhZ2U/OiBzdHJpbmc7XHJcblx0LyoqXHJcblx0ICogSFRUUCBzdGF0dXMgY29kZSByZXR1cm5lZCBieSB0aGUgcmVxdWVzdCAoaWYgYXZhaWxhYmxlKVxyXG5cdCAqL1xyXG5cdHN0YXR1c0NvZGU/OiBzdHJpbmc7XHJcblx0LyoqXHJcblx0ICogVGhlIHN0YXR1cyBhcyBhIHRleHQsIGRldGFpbHMgbm90IHNwZWNpZmllZCwgaW50ZW5kZWQgb25seSBmb3IgZGlhZ25vc2lzIG91dHB1dFxyXG5cdCAqL1xyXG5cdHN0YXR1c1RleHQ/OiBzdHJpbmc7XHJcblx0LyoqXHJcblx0ICogUmVzcG9uc2UgdGhhdCBoYXMgYmVlbiByZWNlaXZlZCBmb3IgdGhlIHJlcXVlc3QgLGFzIGEgdGV4dCBzdHJpbmdcclxuXHQgKi9cclxuXHRyZXNwb25zZVRleHQ/OiBzdHJpbmc7XHJcbn07XHJcbi8qKlxyXG4gKiBAbmFtZXNwYWNlIGNvbS50ZW1wbGF0ZS5jb250cm9sbGVyXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFcnJvckhhbmRsZXIgZXh0ZW5kcyBVSTVPYmplY3Qge1xyXG5cdHByaXZhdGUgcmVzb3VyY2VCdW5kbGU6IFJlc291cmNlQnVuZGxlO1xyXG5cdHByaXZhdGUgY29tcG9uZW50OiBBcHBDb21wb25lbnQ7XHJcblx0cHJpdmF0ZSBtb2RlbDogT0RhdGFNb2RlbDtcclxuXHRwcml2YXRlIG1lc3NhZ2VPcGVuOiBib29sZWFuO1xyXG5cdHByaXZhdGUgZXJyb3JUZXh0OiBzdHJpbmc7XHJcblx0Y29uc3RydWN0b3IoY29tcG9uZW50OiBVSUNvbXBvbmVudCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLnJlc291cmNlQnVuZGxlID0gKChjb21wb25lbnQuZ2V0TW9kZWwoXCJpMThuXCIpIGFzIFJlc291cmNlTW9kZWwpLmdldFJlc291cmNlQnVuZGxlKCkgYXMgUmVzb3VyY2VCdW5kbGUpO1xyXG5cdFx0dGhpcy5jb21wb25lbnQgPSAoY29tcG9uZW50IGFzIEFwcENvbXBvbmVudCk7XHJcblx0XHR0aGlzLm1vZGVsID0gKGNvbXBvbmVudC5nZXRNb2RlbCgpIGFzIE9EYXRhTW9kZWwpO1xyXG5cdFx0dGhpcy5tZXNzYWdlT3BlbiA9IGZhbHNlO1xyXG5cdFx0dGhpcy5lcnJvclRleHQgPSB0aGlzLnJlc291cmNlQnVuZGxlLmdldFRleHQoXCJlcnJvclRleHRcIik7XHJcblxyXG5cdFx0dGhpcy5tb2RlbC5hdHRhY2hNZXRhZGF0YUZhaWxlZCgoZXZlbnQ6IFVJNUV2ZW50KSA9PiB7XHJcblx0XHRcdGNvbnN0IHJlc3BvbnNlVGV4dCA9IChldmVudC5nZXRQYXJhbWV0ZXIoXCJyZXNwb25zZVwiKSBhcyB1aTVSZXNwb25zZSk7XHJcblx0XHRcdHRoaXMuc2hvd1NlcnZpY2VFcnJvcihyZXNwb25zZVRleHQpO1xyXG5cdFx0fSk7XHJcblx0XHR0aGlzLm1vZGVsLmF0dGFjaFJlcXVlc3RGYWlsZWQoKGV2ZW50OiBVSTVFdmVudCkgPT4ge1xyXG5cdFx0XHRjb25zdCByZXNwb25zZSA9IChldmVudC5nZXRQYXJhbWV0ZXIoXCJyZXNwb25zZVwiKSBhcyB1aTVSZXNwb25zZSk7XHJcblx0XHRcdC8vIEFuIGVudGl0eSB0aGF0IHdhcyBub3QgZm91bmQgaW4gdGhlIHNlcnZpY2UgaXMgYWxzbyB0aHJvd2luZyBhIDQwNCBlcnJvciBpbiBvRGF0YS5cclxuXHRcdFx0Ly8gV2UgYWxyZWFkeSBjb3ZlciB0aGlzIGNhc2Ugd2l0aCBhIG5vdEZvdW5kIHRhcmdldCBzbyB3ZSBza2lwIGl0IGhlcmUuXHJcblx0XHRcdC8vIEEgcmVxdWVzdCB0aGF0IGNhbm5vdCBiZSBzZW50IHRvIHRoZSBzZXJ2ZXIgaXMgYSB0ZWNobmljYWwgZXJyb3IgdGhhdCB3ZSBoYXZlIHRvIGhhbmRsZSB0aG91Z2hcclxuXHRcdFx0aWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IFwiNDA0XCIgfHwgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT0gXCI0MDRcIiAmJiByZXNwb25zZS5yZXNwb25zZVRleHQuaW5kZXhPZihcIkNhbm5vdCBQT1NUXCIpID09PSAwKSkge1xyXG5cdFx0XHRcdHRoaXMuc2hvd1NlcnZpY2VFcnJvcihyZXNwb25zZSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHQvKipcclxuXHQgKiBTaG93cyBhIHtAbGluayBzYXAubS5NZXNzYWdlQm94fSB3aGVuIGEgc2VydmljZSBjYWxsIGhhcyBmYWlsZWQuXHJcblx0ICogT25seSB0aGUgZmlyc3QgZXJyb3IgbWVzc2FnZSB3aWxsIGJlIGRpc3BsYXkuXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IHNEZXRhaWxzIGEgdGVjaG5pY2FsIGVycm9yIHRvIGJlIGRpc3BsYXllZCBvbiByZXF1ZXN0XHJcblx0ICogQHByaXZhdGVcclxuXHQgKi9cclxuXHRwcml2YXRlIHNob3dTZXJ2aWNlRXJyb3Ioc0RldGFpbHM6IHVpNVJlc3BvbnNlKSB7XHJcblx0XHRpZiAodGhpcy5tZXNzYWdlT3Blbikge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHR0aGlzLm1lc3NhZ2VPcGVuID0gdHJ1ZTtcclxuXHRcdGxldCByZXNwb25zZVRleHQ6YW55O1xyXG5cclxuXHRcdGlmKHNEZXRhaWxzLnJlc3BvbnNlVGV4dCl7XHJcblx0XHRcdHRyeXtcclxuXHRcdFx0XHRyZXNwb25zZVRleHQgPSAoSlNPTi5wYXJzZShzRGV0YWlscy5yZXNwb25zZVRleHQpIGFzIHVua25vd24pO1xyXG5cdFx0XHR9Y2F0Y2goZXgpe1xyXG5cdFx0XHRcdHJlc3BvbnNlVGV4dCA9IHNEZXRhaWxzLnJlc3BvbnNlVGV4dDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0TWVzc2FnZUJveC5lcnJvcihcclxuXHRcdFx0dGhpcy5lcnJvclRleHQsXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZDogXCJzZXJ2aWNlRXJyb3JNZXNzYWdlQm94XCIsXHJcblx0XHRcdFx0ZGV0YWlsczogKHJlc3BvbnNlVGV4dCBhcyB1bmtub3duIGFzIHN0cmluZyksXHJcblx0XHRcdFx0c3R5bGVDbGFzczogdGhpcy5jb21wb25lbnQuZ2V0Q29udGVudERlbnNpdHlDbGFzcygpLFxyXG5cdFx0XHRcdC8vIGFjdGlvbnMgOiBbQWN0aW9uLkNMT1NFXSxcclxuXHRcdFx0XHRvbkNsb3NlOiAoKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLm1lc3NhZ2VPcGVuID0gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cdH1cclxufSJdfQ==